service: dr-tiedonkeruu
frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-s3-local
  - serverless-offline
  - serverless-s3-sync

custom:
  stage: ${opt:stage, 'dev'}
  serverless-offline:
    httpPort: 3003
  s3: # serverless-s3-local configuration
    host: localhost
    directory: /tmp
  securityGroupId: ${env:offline.SECURITY_GROUP_ID, ssm:${env:SECURITY_GROUP_ID}}
  subnetId1: ${env:offline.SUBNET_ID_1, ssm:${env:SUBNET_ID_1}}
  subnetId2: ${env:offline.SUBNET_ID_2, ssm:${env:SUBNET_ID_2}}
  recaptchaSecret: ${env:offline.RECAPTCHA_SECRET, ssm:${env:RECAPTCHA_SECRET}}
  virusScanBucket: dr-tiedonkeruu-${self:custom.stage}-virus-scanner-hosting
  virusScanLambda: ${env:offline.VIRUS_SCAN_LAMBDA, ssm:${env:VIRUS_SCAN_LAMBDA}}
  virusScanRole: ${env:offline.VIRUS_SCAN_ROLE, ssm:${env:VIRUS_SCAN_ROLE}}
  s3Sync:
    - bucketNameKey: FrontendS3BucketNameOutputKey
      localDir: ui
      deleteRemoved: true

package:
  individually: true

provider:
  name: aws
  stage: ${self:custom.stage}
  runtime: nodejs16.x
  region: ${env:REGION}
  vpc:
    securityGroupIds:
      - ${self:custom.securityGroupId}
    subnetIds:
      - ${self:custom.subnetId1}
      - ${self:custom.subnetId2}
  httpApi:
    cors:
      allowedOrigins:
        - ${env:FRONTEND_URL}
      allowedHeaders:
        - g-recaptcha-response
      allowedMethods:
        - OPTIONS
        - POST
  iam:
    deploymentRole: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:AWS_CLOUDFORMATION_ROLE}
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - arn:aws:ssm:${env:REGION}:${env:AWS_ACCOUNT_ID}:parameter/${env:SMTP_CREDENTIALS_NAME}
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource:
            - arn:aws:s3:::${self:custom.virusScanBucket}
            - arn:aws:s3:::${self:custom.virusScanBucket}/*
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:GetObjectTagging
          Resource:
            - arn:aws:s3:::${self:custom.virusScanBucket}
            - arn:aws:s3:::${self:custom.virusScanBucket}/*

functions:
  handlePost:
    handler: src/postLambda.handler
    environment:
      RECAPTCHA_SECRET: ${self:custom.recaptchaSecret}
      VIRUS_SCAN_BUCKET: ${self:custom.virusScanBucket}
    events:
      - httpApi:
          path: /postData
          method: post

  sendEmail:
    handler: src/emailLambda.handler
    environment:
      REGION: ${env:REGION}
      SMTP_CREDENTIALS_NAME: ${env:SMTP_CREDENTIALS_NAME}
      SMTP_ENDPOINT: email-smtp.${env:REGION}.amazonaws.com
      SMTP_SENDER: ${env:SMTP_SENDER}
      VIRUS_SCAN_BUCKET: ${self:custom.virusScanBucket}

resources:
  Resources:
    HandlePostLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 180

    SendEmailLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 180

    virusScannerS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.virusScanBucket}
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: ${self:custom.virusScanLambda}
            - Event: s3:ObjectTagging:Put
              Function: ${self:custom.sendEmailLambda}

    virusScannerS3Bucket:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketDrtiedonkeruudevvirusscannerhosting
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS: ${self:custom.virusScanRole}
              Action:
                - s3:GetObject
                - s3:PutObjectTagging
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref S3BucketDrtiedonkeruudevvirusscannerhosting
                    - '/*'

    FrontendS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: dr-tiedonkeruu-${self:custom.stage}-frontend-hosting

    FrontendS3OAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'DRTiedonkeruu Frontend Origin Access Identity'

    FrontendS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: FrontendS3Bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt:
                    - FrontendS3OAI
                    - S3CanonicalUserId
              Action: s3:GetObject
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref FrontendS3Bucket
                    - '/*'

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: S3Origin
              DomainName:
                Fn::Join:
                  - ''
                  - - !Ref FrontendS3Bucket
                    - '.s3-${env:REGION}.amazonaws.com'
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${FrontendS3OAI}'
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            ViewerProtocolPolicy: https-only
          Enabled: true

  Outputs:
    FrontendS3BucketNameOutputKey:
      Value: !Ref FrontendS3Bucket
